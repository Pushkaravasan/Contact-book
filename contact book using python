class Contact:
    def __init__(self, name, phone, email, address):
        self.name = name
        self.phone = phone
        self.email = email
        self.address = address

class ContactManager:
    def __init__(self):
        self.contacts = []

    def add_contact(self):
        name = input("Enter Name: ")
        phone = input("Enter Phone Number: ")
        email = input("Enter Email: ")
        address = input("Enter Address: ")
        new_contact = Contact(name, phone, email, address)
        self.contacts.append(new_contact)
        print("Contact added successfully!")

    def view_contacts(self):
        if not self.contacts:
            print("No contacts available.")
            return
        print("\nContact List:")
        for index, contact in enumerate(self.contacts):
            print(f"{index + 1}. {contact.name} - {contact.phone}")
        print()

    def search_contact(self):
        search_term = input("Enter Name or Phone Number to search: ")
        found_contacts = [
            contact for contact in self.contacts
            if search_term.lower() in contact.name.lower() or search_term in contact.phone
        ]
        if found_contacts:
            print("\nSearch Results:")
            for contact in found_contacts:
                self.display_contact(contact)
        else:
            print("No contacts found.")

    def update_contact(self):
        self.view_contacts()
        try:
            contact_index = int(input("Enter the contact number to update: ")) - 1
            if 0 <= contact_index < len(self.contacts):
                contact = self.contacts[contact_index]
                contact.name = input(f"Enter new name ({contact.name}): ") or contact.name
                contact.phone = input(f"Enter new phone ({contact.phone}): ") or contact.phone
                contact.email = input(f"Enter new email ({contact.email}): ") or contact.email
                contact.address = input(f"Enter new address ({contact.address}): ") or contact.address
                print("Contact updated successfully!")
            else:
                print("Invalid contact number.")
        except ValueError:
            print("Invalid input. Please enter a valid contact number.")

    def delete_contact(self):
        self.view_contacts()
        try:
            contact_index = int(input("Enter the contact number to delete: ")) - 1
            if 0 <= contact_index < len(self.contacts):
                removed_contact = self.contacts.pop(contact_index)
                print(f"Contact '{removed_contact.name}' deleted successfully!")
            else:
                print("Invalid contact number.")
        except ValueError:
            print("Invalid input. Please enter a valid contact number.")

    def display_contact(self, contact):
        print(f"\nName: {contact.name}")
        print(f"Phone: {contact.phone}")
        print(f"Email: {contact.email}")
        print(f"Address: {contact.address}\n")

    def menu(self):
        while True:
            print("\nContact Manager")
            print("1. Add Contact")
            print("2. View Contact List")
            print("3. Search Contact")
            print("4. Update Contact")
            print("5. Delete Contact")
            print("6. Exit")

            choice = input("Enter your choice (1-6): ")
            if choice == '1':
                self.add_contact()
            elif choice == '2':
                self.view_contacts()
            elif choice == '3':
                self.search_contact()
            elif choice == '4':
                self.update_contact()
            elif choice == '5':
                self.delete_contact()
            elif choice == '6':
                print("Exiting Contact Manager. Goodbye!")
                break
            else:
                print("Invalid choice. Please try again.")

# Run the contact manager
if __name__ == "__main__":
    manager = ContactManager()
    manager.menu()
